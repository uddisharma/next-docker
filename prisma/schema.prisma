datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int        @id @default(autoincrement())
  firstName  String?    @db.VarChar(100)
  lastName   String?    @db.VarChar(100)
  email      String     @unique @db.VarChar(255)
  image      String?
  phone      String?    @unique @db.VarChar(15)
  gender     Gender?    @default(MALE)
  age        Int?
  location   String?
  pinCode    Int?
  loginType  LoginType? @default(GOOGLE)
  source     String?
  lastLogin  DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  role       Role       @default(USER)
  otp        Int?
  otpExpires DateTime?

  blogs    Blog[]
  reports  Report[]
  accounts Account[]
  sessions Session[]

  @@index([email])
  @@map("users")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  content     String   @db.Text
  image       String?
  published   Boolean  @default(false)
  authorId    Int
  category    String   @db.VarChar(100)
  subCategory String?  @db.VarChar(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@map("blogs")
}

model Report {
  id             Int       @id @default(autoincrement())
  userId         Int
  startTime      DateTime
  endTime        DateTime
  sessionId      String
  recommendation Json
  questions      Json[] // [{question: string, answer: string}]
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("reports")
}

model Question {
  id           Int          @id @default(autoincrement())
  text         String       @db.Text
  sequence     Int
  questionType QuestionType @default(SINGLE_SELECT)
  required     Boolean      @default(true)
  isActive     Boolean      @default(true)
  isDeleted    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt

  options Option[]

  @@index([questionType])
  @@map("questions")
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  text       String   @db.Text
  sequence   Int
  isActive   Boolean  @default(true)
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  question        Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@map("options")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
  EDITOR
}

enum QuestionType {
  SINGLE_SELECT
  MULTIPLE_SELECT
  TEXT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum LoginType {
  GOOGLE
  PHONE
}
